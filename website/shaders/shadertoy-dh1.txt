/////////////////////////////////////////////////////////////////////////
// Extra code added to integrate Shadertoy.com shader into shaderback.js
/////////////////////////////////////////////////////////////////////////

precision highp float;

varying vec2 vTextureCoord;
uniform highp float time;
uniform float width;
uniform float height;
vec3 iResolution;
float iGlobalTime;
vec2 iMouse;

/////////////////////////////////////////////////////////////////////////
// Code below (except right at the end) is directly from Shadertoy.com
// https://www.shadertoy.com/view/Xds3zN
/////////////////////////////////////////////////////////////////////////


// 'Warp Speed' by David Hoskins 2013.
// Adapted it from here:-   https://www.shadertoy.com/view/MssGD8
// I tried to find gaps and variation in the star cloud for a feeling of structure.
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	float s = 0.0, v = 0.0;
	vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;
	float t = (iGlobalTime * 0.3);
	uv.x = (uv.x * iResolution.x / iResolution.y) + sin(t) * 0.5;
	float si = sin(t + 2.17); // ...Squiffy rotation matrix!
	float co = cos(t);
	uv *= mat2(co, si, -si, co);
	vec3 col = vec3(0.0);
	vec3 init = vec3(0.25, 0.25 + sin((iGlobalTime) * 0.06) * 0.4, floor((iGlobalTime) * 60.0) * 0.0008);
	for (int r = 0; r < 100; r++) 
	{
		vec3 p = init + s * vec3(uv, 0.143);
		p.z = mod(p.z, 2.0);
		for (int i=0; i < 10; i++)	p = abs(p * 2.04) / dot(p, p) - 0.75;
		v += length(p * p) * smoothstep(0.0, 0.5, 0.9 - s) * .002;
		// Get a purple and cyan effect by biasing the RGB in different ways...
		col +=  vec3(v * 0.8, 1.1 - s * 0.5, .7 + v * 0.3) * v * 0.013;
		s += .01;
	}
	col.b += 0.2;
	fragColor = vec4(col, 1.0);
}
/////////////////////////////////////////////////////////////////////////
// Extra code added to integrate Shadertoy.com shader into shaderback.js
/////////////////////////////////////////////////////////////////////////


void main () {
	vec4 fragColor;
	vec2 fragCoord = vTextureCoord * vec2(width, height);
	iResolution = vec3 (width, height, width / height);
	iGlobalTime = time / 1000.0;
	iMouse = vec2(0.0, 0.0);
	
	mainImage(fragColor, fragCoord );

	gl_FragColor = fragColor;
	gl_FragColor.a = 1.0;
}



